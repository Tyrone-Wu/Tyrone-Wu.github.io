(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{519:function(t,_,e){"use strict";e.r(_);var v=e(25),a=Object(v.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"面试知识点整理-网络篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试知识点整理-网络篇"}},[t._v("#")]),t._v(" 面试知识点整理 --  网络篇")]),t._v(" "),e("h2",{attrs:{id:"一、协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、协议"}},[t._v("#")]),t._v(" 一、协议")]),t._v(" "),e("h3",{attrs:{id:"_1-说说-http-相关内容及你的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-说说-http-相关内容及你的理解"}},[t._v("#")]),t._v(" 1. 说说 HTTP 相关内容及你的理解？")]),t._v(" "),e("p",[t._v("HTTP 全称超文本传输协议（HTTP，HyperText Transfer Protocol)，所有的 WWW 文件都必须遵守这个标准。是一个应用层的"),e("strong",[t._v("请求-响应")]),t._v("协议，是最开始用于网络请求传输的协议。但是存在无状态、请求只能由客户端发起、明文传输的问题。")]),t._v(" "),e("p",[t._v("针对无状态问题：引入了轮询以及"),e("code",[t._v("keep-alive")]),t._v("的概念，2008 基于 HTTP 出现了 WebSocket 的概念。具体内容件 websocket 部分。")]),t._v(" "),e("p",[t._v("针对明文传输的安全问题：出现了在应用层和传输层之间加入 TLS 的 HTTPS 协议。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/18/170eb717455f5774?w=594&h=435&f=png&s=229585",alt:""}})]),t._v(" "),e("p",[t._v("针对 HTTP 相关的历史，推荐一篇文章："),e("a",{attrs:{href:"https://blog.csdn.net/freekiteyu/article/details/76423436",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"_2-http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http"}},[t._v("#")]),t._v(" 2. HTTP")]),t._v(" "),e("p",[t._v("HTTP 特点")]),t._v(" "),e("ul",[e("li",[t._v("可靠传输。基于 TCP/IP。")]),t._v(" "),e("li",[t._v("灵活扩展。语义自由以及传输形式的多样性。")]),t._v(" "),e("li",[t._v("请求应答模式")]),t._v(" "),e("li",[t._v("无状态，每次请求之间相互独立")])]),t._v(" "),e("p",[t._v("HTTP 缺陷")]),t._v(" "),e("ul",[e("li",[t._v("无状态")]),t._v(" "),e("li",[t._v("明文传输")]),t._v(" "),e("li",[t._v("队头阻塞")])]),t._v(" "),e("h3",{attrs:{id:"_3-https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-https"}},[t._v("#")]),t._v(" 3. HTTPS")]),t._v(" "),e("h3",{attrs:{id:"_4-websocket-知识点总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-websocket-知识点总结"}},[t._v("#")]),t._v(" 4.websocket 知识点总结？")]),t._v(" "),e("p",[t._v("WebSocket 是 HTML5 开始提供的一种在"),e("code",[t._v("单个 TCP 连接上进行全双工通讯")]),t._v("的协议。")]),t._v(" "),e("p",[e("strong",[t._v("websocket 的特点：")])]),t._v(" "),e("ul",[e("li",[t._v("服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。")]),t._v(" "),e("li",[t._v("建立在 TCP 协议之上，服务器端的实现比较容易。")]),t._v(" "),e("li",[t._v("与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")]),t._v(" "),e("li",[t._v("数据格式比较轻量，性能开销小，通信高效。")]),t._v(" "),e("li",[t._v("可以发送文本，也可以发送二进制数据。")]),t._v(" "),e("li",[t._v("没有同源限制，客户端可以与任意服务器通信。")]),t._v(" "),e("li",[t._v("协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。")])]),t._v(" "),e("p",[e("strong",[t._v("客户端 API")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("var ws = new WebSocket('ws://localhost:8080')")]),t._v(": 新建 WebSocket 实例")]),t._v(" "),e("li",[e("code",[t._v("webSocket.readyState")]),t._v(": 返回实例对象的当前状态\n"),e("ul",[e("li",[e("code",[t._v("CONNECTING")]),t._v("：值为 0，表示正在连接。")]),t._v(" "),e("li",[e("code",[t._v("OPEN")]),t._v("：值为 1，表示连接成功，可以通信了。")]),t._v(" "),e("li",[e("code",[t._v("CLOSING")]),t._v("：值为 2，表示连接正在关闭。")]),t._v(" "),e("li",[e("code",[t._v("CLOSED")]),t._v("：值为 3，表示连接已经关闭，或者打开连接失败。")])])]),t._v(" "),e("li",[e("code",[t._v("webSocket.onopen")]),t._v(": 用于指定连接成功后的回调函数")]),t._v(" "),e("li",[e("code",[t._v("webSocket.onclose")]),t._v(": 用于指定连接关闭后的回调函数")]),t._v(" "),e("li",[e("code",[t._v("webSocket.onmessage")]),t._v(": 用于指定收到服务器数据后的回调函数")]),t._v(" "),e("li",[e("code",[t._v("webSocket.send()")]),t._v(": 用于向服务器发送数据")]),t._v(" "),e("li",[e("code",[t._v("webSocket.bufferedAmount")]),t._v(": 表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束")]),t._v(" "),e("li",[e("code",[t._v("webSocket.onerror")]),t._v(": 用于指定报错时的回调函数")])]),t._v(" "),e("p",[e("a",{attrs:{href:"%5Bhttp://www.ruanyifeng.com/blog/2017/05/websocket.html%5D"}},[t._v("参考教程(阮一峰的网络日志)")])]),t._v(" "),e("h3",{attrs:{id:"_5-七层协议的内容以及各阶段的协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-七层协议的内容以及各阶段的协议"}},[t._v("#")]),t._v(" 5.七层协议的内容以及各阶段的协议？")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("层次")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("内容")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("协议")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("应用层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("为应用程序提供服务，并管理应用程序之间的通信")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("SMTP、HTTP、FTP")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("表示层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("处理数据的标识问题，比如编码、格式转化、加密解密等")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("会话层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("负责建立管理和断开通信连接，实现数据同步")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("传输层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("端到端传输数据，同时处理传输错误、控制流量等")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("TCP UDP")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("网络层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("地址管理、路由选择")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("IP 协议")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("数据链路层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("数据分割成帧，mac 寻址、差错校验、信息纠正等。")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("以太网")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("物理层")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("利用传输介质为数据链路层提供物理连接")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),e("p",[t._v("PS：五层协议当中是把七层当中的应用、表示、会话三层合并为应用层。")]),t._v(" "),e("h3",{attrs:{id:"_6-udp-与-tcp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-udp-与-tcp"}},[t._v("#")]),t._v(" 6. UDP 与 TCP")]),t._v(" "),e("h3",{attrs:{id:"_7-dns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-dns"}},[t._v("#")]),t._v(" 7. DNS")]),t._v(" "),e("h2",{attrs:{id:"二、通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、通信"}},[t._v("#")]),t._v(" 二、通信")]),t._v(" "),e("h3",{attrs:{id:"_1-http-状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-状态码"}},[t._v("#")]),t._v(" 1. HTTP 状态码？")]),t._v(" "),e("p",[e("strong",[t._v("1XX: 通知")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("100 Continue")]),t._v(" 客户端应重新发请求")]),t._v(" "),e("li",[e("code",[t._v("101 Switching Protocols")]),t._v(" 改用协议 http 换到 https 或者 http1.1 换到 2.0 之类")])]),t._v(" "),e("p",[e("strong",[t._v("2XX：成功")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("200 OK")]),t._v(" 操作成功")]),t._v(" "),e("li",[e("code",[t._v("201 Created")]),t._v("按照客户端请求创建了一个新资源")]),t._v(" "),e("li",[e("code",[t._v("202 Accepted")]),t._v("请求无法或不被实时处理")]),t._v(" "),e("li",[e("code",[t._v("204 No Content")]),t._v(" 请求成功，但是报文不含实体的主体部分")]),t._v(" "),e("li",[e("code",[t._v("205 Reset Content")]),t._v(" 请求成功，但是报文不含实体主体部分，要求客户端重置内容")]),t._v(" "),e("li",[e("code",[t._v("206 Partial Content")]),t._v(" 进行范围请求")])]),t._v(" "),e("p",[e("strong",[t._v("3XX：重定向")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("301 Moved Permanently")]),t._v("永久性重定向，资源已经被分配到了新的 URL")]),t._v(" "),e("li",[e("code",[t._v("302 Found")]),t._v(" 临时重定向，资源临时分配了 URL 实际上发部分客户端把它当成 303 处理")]),t._v(" "),e("li",[e("code",[t._v("303 See Other")]),t._v(" 表示资源存在另一个 URL。应用 Get 获取资源")]),t._v(" "),e("li",[e("code",[t._v("304 Not Modified")]),t._v(" 允许访问资源，但实体主体为空（客户端已经有此数据，不需要再次发送）")]),t._v(" "),e("li",[e("code",[t._v("307 Temporary Redirect")]),t._v(" 临时重定向，资源临时分配了 URL，但是希望客户端能够保持方法不变请求新地址（解决 302 被当成 303 处理的问题）")])]),t._v(" "),e("p",[e("strong",[t._v("4XX：客户端错误")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("400 Bad Request")]),t._v(" 请求报文语法错误")]),t._v(" "),e("li",[e("code",[t._v("401 Unauthorized")]),t._v(" 发送的请求需要通过验证，客户端试图对一个受保护的资源操作但没有认证证书")]),t._v(" "),e("li",[e("code",[t._v("403 Forbidden")]),t._v(" 请求资源存在但被拒绝，常用于一个资源只允许在特定时间段内访问（如果不想透露可以谎报 404）")]),t._v(" "),e("li",[e("code",[t._v("404 Not Found")]),t._v(" 找不到请求的资源")]),t._v(" "),e("li",[e("code",[t._v("405 Method Not Allowed")]),t._v(" 不支持的请求方法，比如只支持 Get，但是收到了 Post 请求")])]),t._v(" "),e("p",[e("strong",[t._v("5XX：服务端错误")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("500 Internal Server Error")]),t._v(" 执行请求时发生错误（处理异常）")]),t._v(" "),e("li",[e("code",[t._v("501 Not Implemented")]),t._v(" 不支持此请求方法（和 405 区别在于，405 是访问的资源不支持，而 501 表示服务器不能操作此方法）")]),t._v(" "),e("li",[e("code",[t._v("502 Bad Gateway")]),t._v(" 代理与上行服务器之间出现问题")]),t._v(" "),e("li",[e("code",[t._v("503 Service Unavailable")]),t._v(" 服务器暂时处于超负荷或者维护中")])]),t._v(" "),e("h3",{attrs:{id:"_2-get-和-post-区别-分别在什么场景下使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-get-和-post-区别-分别在什么场景下使用"}},[t._v("#")]),t._v(" 2. get 和 post 区别？分别在什么场景下使用？")]),t._v(" "),e("p",[t._v("GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。")]),t._v(" "),e("blockquote",[e("p",[t._v("分别为缓存、编码、参数、幂等性、TCP")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("区别")]),t._v(" "),e("th",[t._v("GET")]),t._v(" "),e("th",[t._v("POST")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("作用")]),t._v(" "),e("td",[t._v("从指定的资源请求数据")]),t._v(" "),e("td",[t._v("向指定的资源提交要被处理的数据")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("请求方式")]),t._v(" "),e("td",[t._v("浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）")]),t._v(" "),e("td",[t._v("浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("参数传递")]),t._v(" "),e("td",[t._v("url 传递（长度有限制）")]),t._v(" "),e("td",[t._v("放在 request body 中（长度不限）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("安全")]),t._v(" "),e("td",[t._v("参数直接暴露在 url 中，所以不能用来传递敏感信息")]),t._v(" "),e("td",[t._v("相对安全")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("编码方式")]),t._v(" "),e("td",[t._v("只能进行 url 编码 ASCII 数据类型 会浏览器主动 cache")]),t._v(" "),e("td",[t._v("支持多种编码方式 允许二进制数据")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("参数保留")]),t._v(" "),e("td",[t._v("请求参数会被完整保留在浏览历史记录里")]),t._v(" "),e("td",[t._v("参数不会被保留")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("数据包")]),t._v(" "),e("td",[t._v("一个 TCP 数据包")]),t._v(" "),e("td",[t._v("两个 TCP 数据包")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("回退")]),t._v(" "),e("td",[t._v("无害")]),t._v(" "),e("td",[t._v("再次提交请求")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("缓存")]),t._v(" "),e("td",[t._v("能请求缓存")]),t._v(" "),e("td",[t._v("不能")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-http-的请求方式详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-的请求方式详解"}},[t._v("#")]),t._v(" 3. HTTP 的请求方式详解？")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),e("th",[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("GET")])]),t._v(" "),e("td",[t._v("发送一个请求来取得服务器上的某一资源")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("POST")])]),t._v(" "),e("td",[t._v("向 URL 指定的资源提交数据或附加新的数据")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("PUT")])]),t._v(" "),e("td",[t._v("跟 POST 方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT 指定了资源在服务器上的位置，而 POST 没有")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("HEAD")])]),t._v(" "),e("td",[t._v("只请求页面的首部")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("DELETE")])]),t._v(" "),e("td",[t._v("删除服务器上的某资源")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("OPTIONS")])]),t._v(" "),e("td",[t._v("它用于获取当前 URL 所支持的方法。如果请求成功，会有一个 Allow 的头包含类似“GET,POST”这样的信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("TRACE")])]),t._v(" "),e("td",[t._v("TRACE 方法被用于激发一个远程的，应用层的请求消息回路")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("CONNECT")])]),t._v(" "),e("td",[t._v("把请求连接转换到透明的 TCP/IP 通道")])])])]),t._v(" "),e("h3",{attrs:{id:"_4-http-请求详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-请求详解"}},[t._v("#")]),t._v(" 4. HTTP 请求详解？")]),t._v(" "),e("h3",{attrs:{id:"_5-简述-http1-0-1-1-2-0-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-简述-http1-0-1-1-2-0-的区别"}},[t._v("#")]),t._v(" 5. 简述 HTTP1.0/1.1/2.0 的区别?")]),t._v(" "),e("h4",{attrs:{id:"http-1-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP 1.0")]),t._v(" "),e("p",[t._v("HTTP 1.0 是在 1996 年引入的，从那时开始，它的普及率就达到了惊人的效果。")]),t._v(" "),e("ul",[e("li",[t._v("HTTP 1.0 仅仅提供了最基本的认证，这时候用户名和密码还未经加密，因此很容易收到窥探。")]),t._v(" "),e("li",[t._v("HTTP 1.0 被设计用来使用短链接，即每次发送数据都会经过 TCP 的三次握手和四次挥手，效率比较低。")]),t._v(" "),e("li",[t._v("HTTP 1.0 只使用 header 中的 If-Modified-Since 和 Expires 作为缓存失效的标准。")]),t._v(" "),e("li",[t._v("HTTP 1.0 不支持断点续传，也就是说，每次都会传送全部的页面和数据。")]),t._v(" "),e("li",[t._v("HTTP 1.0 认为每台计算机只能绑定一个 IP，所以请求消息中的 URL 并没有传递主机名（hostname）。")])]),t._v(" "),e("h4",{attrs:{id:"http-1-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP 1.1")]),t._v(" "),e("p",[t._v("HTTP 1.1 是 HTTP 1.0 开发三年后出现的，也就是 1999 年，它做出了以下方面的变化")]),t._v(" "),e("ul",[e("li",[t._v("HTTP 1.1 使用了摘要算法来进行身份验证")]),t._v(" "),e("li",[t._v("HTTP 1.1 默认使用长连接，长连接就是只需一次建立就可以传输多次数据，传输完成后，只需要一次切断连接即可。长连接的连接时长可以通过请求头中的 "),e("code",[t._v("keep-alive")]),t._v(" 来设置")]),t._v(" "),e("li",[t._v("HTTP 1.1 中新增加了 E-tag，If-Unmodified-Since, If-Match, If-None-Match 等缓存控制标头来控制缓存失效。")]),t._v(" "),e("li",[t._v("HTTP 1.1 支持断点续传，通过使用请求头中的 "),e("code",[t._v("Range")]),t._v(" 来实现。")]),t._v(" "),e("li",[t._v("HTTP 1.1 使用了虚拟网络，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。")])]),t._v(" "),e("h4",{attrs:{id:"http-2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" HTTP 2.0")]),t._v(" "),e("p",[t._v("HTTP 2.0 是 2015 年开发出来的标准，它主要做的改变如下")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("头部压缩")]),t._v("，由于 HTTP 1.1 经常会出现 "),e("strong",[t._v("User-Agent、Cookie、Accept、Server、Range")]),t._v(" 等字段可能会占用几百甚至几千字节，而 Body 却经常只有几十字节，所以导致头部偏重。HTTP 2.0 使用 "),e("code",[t._v("HPACK")]),t._v(" 算法进行压缩。")]),t._v(" "),e("li",[e("code",[t._v("二进制格式")]),t._v("，HTTP 2.0 使用了更加靠近 TCP/IP 的二进制格式，而抛弃了 ASCII 码，提升了解析效率")]),t._v(" "),e("li",[e("code",[t._v("强化安全")]),t._v("，由于安全已经成为重中之重，所以 HTTP2.0 一般都跑在 HTTPS 上。")]),t._v(" "),e("li",[e("code",[t._v("多路复用")]),t._v("，即每一个请求都是是用作连接共享。一个请求对应一个 id，这样一个连接上可以有多个请求。")])]),t._v(" "),e("p",[e("strong",[t._v("结语")])]),t._v(" "),e("p",[t._v("未完更新~~~")])])}),[],!1,null,null,null);_.default=a.exports}}]);