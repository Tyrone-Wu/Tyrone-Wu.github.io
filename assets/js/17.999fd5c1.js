(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{511:function(t,a,s){"use strict";s.r(a);var _=s(25),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第四章-js-变量、作用域和内存问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-js-变量、作用域和内存问题"}},[t._v("#")]),t._v(" 第四章 JS 变量、作用域和内存问题")]),t._v(" "),s("h3",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本系列是在学习 JS 的过程中所做的读书笔记，将重点知识提取出来在闲暇时刻翻阅，如果你看过这本书，那收藏起来当复习用；如果你没看过这本书，那还犹豫啥，收藏起来抱佛脚用的啦~~~")]),t._v(" "),s("blockquote",[s("p",[t._v("注：内容摘抄或总结自《JavaScript 高级程序设计》第三到七章")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"一、基本类型和引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、基本类型和引用类型"}},[t._v("#")]),t._v(" 一、基本类型和引用类型")]),t._v(" "),s("blockquote",[s("p",[t._v("JavaScript 的变量与其他语言的变量有很大区别。JavaScript 变量松散类型的本质，决定了它只是在特定时间用于保存特定值的一个名字而已。由于不存在定义某 个变量必须要保存何种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。")])]),t._v(" "),s("p",[s("strong",[t._v("基本数据类型：")]),t._v(" Undefined、Null、Boolean、Number 、String、Symbol")]),t._v(" "),s("p",[s("strong",[t._v("引用数据类型：")]),t._v("\nArray、Object、Date、RegExp 、Function")]),t._v(" "),s("p",[s("strong",[t._v("引用类型的值是保存在内存中的对象")]),t._v("。与其他语言不同，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。")]),t._v(" "),s("h3",{attrs:{id:"_1-动态的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-动态的属性"}},[t._v("#")]),t._v(" 1.动态的属性")]),t._v(" "),s("ul",[s("li",[t._v("定义基本类型值和引用类型值的方式是类似的：创建一个变量并为该变量赋值")]),t._v(" "),s("li",[t._v("对于引用类型的值，我们可以为其添加属 性和方法，也可以改变和删除其属性和方法。")]),t._v(" "),s("li",[t._v("只能给引用类型值动态地添加属性，以便将来使用。（基本类型不能添加属性）")])]),t._v(" "),s("h3",{attrs:{id:"_2-复制变量值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-复制变量值"}},[t._v("#")]),t._v(" 2.复制变量值")]),t._v(" "),s("ul",[s("li",[t._v("除了保存方式不同，复制时候基本类型和引用类型也不同。")]),t._v(" "),s("li",[t._v("如果从一个变量向另一个变量复制基本类型的值，"),s("strong",[t._v("会在变量对象上创建一个新值，然后把该值复制 到为新变量分配的位置上")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/29/1708fa37a002b569?w=593&h=316&f=png&s=17219",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("当复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到 为新变量分配的空间中。但是这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/29/1708fa30e6168504?w=587&h=344&f=png&s=42405",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3-传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-传递参数"}},[t._v("#")]),t._v(" 3.传递参数")]),t._v(" "),s("ul",[s("li",[t._v("把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。")]),t._v(" "),s("li",[t._v("基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样")]),t._v(" "),s("li",[t._v("在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者说就是 arguments 对象中的一个元素）")]),t._v(" "),s("li",[t._v("在向参数传递引用类型的值时，会把这个"),s("strong",[t._v("值在内存中的地址复制")]),t._v("给一个局部变量，因此这个局部变量的变化会反映在函数的外部。")]),t._v(" "),s("li",[t._v("当在函数内部重写 obj 时，这 个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。")])]),t._v(" "),s("h3",{attrs:{id:"_4-检测类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-检测类型"}},[t._v("#")]),t._v(" 4.检测类型")]),t._v(" "),s("ul",[s("li",[t._v("typeof 操作符是确定一个变量是"),s("strong",[t._v("字符串、数值、布尔值，还是 undefined 的最佳工具")]),t._v('。如果变 量的值是一个对象或 null，则返回"object"。')]),t._v(" "),s("li",[t._v("typeof 在检测引用类型的值时，这个操作符的用处不大。")]),t._v(" "),s("li",[t._v("如果使用 instanceof 操作符检测基本类型的值，则该操作符始终会返回 false，"),s("strong",[t._v("因为基本类型不是对象。")])])]),t._v(" "),s("h2",{attrs:{id:"二、执行环境及作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、执行环境及作用域"}},[t._v("#")]),t._v(" 二、执行环境及作用域")]),t._v(" "),s("blockquote",[s("p",[t._v("执行环境（环境）定义了变量或函数有权访问的其他数据，决定了它们各自的行为。")])]),t._v(" "),s("blockquote",[s("p",[t._v("每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。我们编写的代码无法访问这个对象，但是解析器在处理数据时会在后台使用它。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全局执行环境是最外围的一个执行环境。在 Web 浏览器中，全局执行环境被认为是 window 对象")])]),t._v(" "),s("li",[s("p",[t._v("某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退 出——例如关闭网页或浏览器——时才会被销毁）。")])]),t._v(" "),s("li",[s("p",[t._v("每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。 而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境")])]),t._v(" "),s("li",[s("p",[t._v("当代码在一个环境中执行时，会创建变量对象的一个作用域链。")])]),t._v(" "),s("li",[s("p",[t._v("全局执行环境的变量对象始终都是作用域链中的最后一个对象。")])]),t._v(" "),s("li",[s("p",[t._v("内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。")]),t._v(" "),s("blockquote",[s("p",[t._v("函数参数也被当作变量来对待，因此其访问规则与执行环境中的其他变量相同。")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-延长作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-延长作用域链"}},[t._v("#")]),t._v(" 1.延长作用域链")]),t._v(" "),s("ul",[s("li",[t._v("虽然执行环境的类型总共只有两种——全局和局部（函数），但还是有其他办法来延长作用域链。\n"),s("ul",[s("li",[t._v("try-catch 语句的 catch 块 ：会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。")]),t._v(" "),s("li",[t._v("with 语句：会将指定的对象添加到 作用域链中。")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-没有块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-没有块级作用域"}},[t._v("#")]),t._v(" 2.没有块级作用域")]),t._v(" "),s("ul",[s("li",[t._v("for 语句创建的变量 i 即使在 for 循环执行结束后，也依旧会存在于循环外部的执行环境中。")]),t._v(" "),s("li",[t._v("声明变量\n"),s("ul",[s("li",[t._v("使用 var 声明的变量会自动被添加到最接近的环境中。")]),t._v(" "),s("li",[t._v("如果初始化变量时没有使用 var 声明，该变量会自动被添加到全局环境。")]),t._v(" "),s("li",[t._v("不声明而直接初始化变量是一个常见的错误做法，因为这样可能会导致意外")])])]),t._v(" "),s("li",[t._v("查询标识符\n"),s("ul",[s("li",[t._v("当在某个环境中为了读取或写入而引用一个标识符时，通过搜索来确定该标识符实际代表什么。搜索过程从作用域链的前端开始，从局部到全局，找到标识符为止。如果在全局环境中也没有找到这个标识符，则意味着该变量尚未声明。")]),t._v(" "),s("li",[t._v("访问局部变量要比访问全局变量更快，因 为不用向上搜索作用域链。")])])])]),t._v(" "),s("h2",{attrs:{id:"三、垃圾收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、垃圾收集"}},[t._v("#")]),t._v(" 三、垃圾收集")]),t._v(" "),s("ul",[s("li",[t._v("JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。")]),t._v(" "),s("li",[t._v("原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间）， 周期性地执行这一操作。")])]),t._v(" "),s("h3",{attrs:{id:"_1-标记清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记清除"}},[t._v("#")]),t._v(" 1.标记清除")]),t._v(" "),s("ul",[s("li",[t._v("当变量进入环境（例如，在函 数中声明一个变量）时，就将这个变量标记为“进入环境”。而当变量离开环境时，则将其标记为“离开环境”。")]),t._v(" "),s("li",[t._v("从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。")])]),t._v(" "),s("h3",{attrs:{id:"_2-引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用计数"}},[t._v("#")]),t._v(" 2.引用计数")]),t._v(" "),s("ul",[s("li",[t._v("引用计数的含义是跟踪记录每 个值被引用的次数，是另一种不太常见的垃圾收集策略。")])]),t._v(" "),s("h3",{attrs:{id:"_3-性能问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能问题"}},[t._v("#")]),t._v(" 3.性能问题")]),t._v(" "),s("ul",[s("li",[t._v("垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大 的。在这种情况下，确定垃圾收集的时间间隔是一个非常重要的问题。")])]),t._v(" "),s("h3",{attrs:{id:"_4-管理内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-管理内存"}},[t._v("#")]),t._v(" 4.管理内存")]),t._v(" "),s("ul",[s("li",[t._v("分配给 Web 浏览器的可用内存数量通常要比分配给桌面应用程序的少。这样做的目的主要是出于安全方面的考虑， 目的是防止运行 JavaScript 的网页耗尽全部系统内存而导致系统崩溃。")]),t._v(" "),s("li",[t._v("内存限制问题不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。")]),t._v(" "),s("li",[t._v("优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为 null 来释放其引用——这个做法叫做解除引用（dereferencing）。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPerson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" localPerson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tlocalPerson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" localPerson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" globalPerson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPerson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nicholas'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//localPerson在函数执行后自动离开执行环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手工解除 globalPerson 的引用")]),t._v("\nglobalPerson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("基本类型值和引用类型值具 有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；")]),t._v(" "),s("li",[t._v("从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；")]),t._v(" "),s("li",[t._v("引用类型的值是对象，保存在堆内存中；")]),t._v(" "),s("li",[t._v("包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；")]),t._v(" "),s("li",[t._v("从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；")]),t._v(" "),s("li",[t._v("确定一个值是哪种基本类型可以使用 typeof 操作符，而确定一个值是哪种引用类型可以使用 instanceof 操作符。")])]),t._v(" "),s("p",[t._v("所有变量（包括基本类型和引用类型）都存在于一个执行环境（也称为作用域）当中，"),s("strong",[t._v("这个执行环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量")]),t._v("。以下是关于执行环境的几点总结：")]),t._v(" "),s("ul",[s("li",[t._v("执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；")]),t._v(" "),s("li",[t._v("每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；")]),t._v(" "),s("li",[t._v("函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全 局环境；")]),t._v(" "),s("li",[t._v("全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；")]),t._v(" "),s("li",[t._v("变量的执行环境有助于确定应该何时释放内存。")])]),t._v(" "),s("p",[t._v("JavaScript 是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配和回收问题。可 以对 JavaScript 的垃圾收集例程作如下总结：")]),t._v(" "),s("ul",[s("li",[t._v("离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。")]),t._v(" "),s("li",[t._v("“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存。")]),t._v(" "),s("li",[t._v("另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript 引擎目前都不再使用这种算法；但在 IE 中访问非原生 JavaScript 对象（如 DOM 元素）时，这种 算法仍然可能会导致问题。")]),t._v(" "),s("li",[t._v("当代码中存在循环引用现象时，“引用计数”算法就会导致问题。")]),t._v(" "),s("li",[t._v("解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地。")])]),t._v(" "),s("p",[t._v("恭喜你坚持读完本文内容，相信在一些细节上又有不小的收获吧！本章结束，翻开其他章节看看呗！")])])}),[],!1,null,null,null);a.default=v.exports}}]);